(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{269:function(a,s,t){"use strict";t.r(s);var e=t(28),l=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"重温范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重温范式"}},[a._v("#")]),a._v(" 重温范式")]),a._v(" "),t("h2",{attrs:{id:"函数范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数范式"}},[a._v("#")]),a._v(" 函数范式")]),a._v(" "),t("blockquote",[t("p",[a._v("—— 精巧的数学思维")])]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("纯函数式编程 Haskell\n非纯函数式编程 Lisp\n")])])]),t("ul",[t("li",[a._v("理论")]),a._v(" "),t("li",[t("ul",[t("li",[a._v("特点")])])])]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("函数是程序的核心，函数无副作用或尽量减少副作用\n没有显式的内存管理\n\n代码结构简洁精巧 \n高级函数类似于基本数据类型，故可将代码用作数据，回调机制采用的正是函数式风格\n")])])]),t("ul",[t("li",[t("ul",[t("li",[a._v("lambda 演算（lambda calculus）")])])])]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("lambda 演算被证明是图灵完备的\n")])])]),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("命令式编程需要指定计算的过程，着重围观的细节；声明式编程只需指定计算的原则，着重宏观的方向。\n")])])]),t("ul",[t("li",[a._v("没有广泛应用的原因")])]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("主观上，程序员更习惯于机器风格的过程式思维和现实风格的OOP思维\n客观上，函数式语言过于数学化和抽象化，在表现力和运行效率等方面与过程式和OOP语言有一定差距\n")])])]),t("ul",[t("li",[a._v("应用领域")])]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("数学计算、人工智能等\n")])])]),t("h2",{attrs:{id:"逻辑范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑范式"}},[a._v("#")]),a._v(" 逻辑范式")]),a._v(" "),t("blockquote",[t("p",[a._v("—— 当算法失去了控制")])]),a._v(" "),t("ul",[t("li",[a._v("Prolog语言")])]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("代码由一系列事实（fact）、规则（rule）和查询（query）组成\n")])])]),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("举例：\n如何表达断言 ：如果一个人未婚且为男士，那么他就是一个光棍。\n")])])]),t("div",{staticClass:"language-Prolog extra-class"},[t("pre",{pre:!0,attrs:{class:"language-prolog"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/* X is bachelor if X is unmarraied and male*/")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bachelor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("X")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("unmarraied")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("X")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("male")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("X")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(".")]),a._v("\n")])])]),t("div",{staticClass:"language-Prolog extra-class"},[t("pre",{pre:!0,attrs:{class:"language-prolog"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":-")]),a._v(" 表示if   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" 表示 and\n")])])]),t("ul",[t("li",[a._v("特点")])]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[t("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("1.")]),a._v(" 模拟人类的逻辑思维\n应用 —— 机器证明、专家系统、自然语言处理、博弈等人工智能领域，非学术领域的知识管理、智能决策分析等\n2\b. 没有明显的输入和输出之分\n"),t("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("3.")]),a._v(" 着眼于关系而非函数\n"),t("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("4.")]),a._v(" 逻辑式编程中程序员只需表达逻辑，而控制交给编译器或解释器去处理\n")])])]),t("ul",[t("li",[a._v("实例")])]),a._v(" "),t("blockquote",[t("p",[a._v("表达血缘关系")])]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("通过规则来定义关系，易于扩展（过程式语言可能需要负载的if嵌套来实现）\n既可以通过人来查找关系，也可以通过关系来查找人\n")])])]),t("ul",[t("li",[a._v("优势")])]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("更简洁、更抽象、更少副作用\n运用得当能大大提升生产效率\n还能运用于快速原型（rapid prototyping）开发\n")])])]),t("ul",[t("li",[a._v("劣势")])]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("运行效率低\n可掌控性差\n与常规的过程式思维差异较大，更适合基于规则（rule-based）的应用，而不是基于状态（state-based）的应用\n目前还不够成熟和完善\n")])])]),t("h2",{attrs:{id:"汇总范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#汇总范式"}},[a._v("#")]),a._v(" 汇总范式")]),a._v(" "),t("blockquote",[t("p",[a._v("—— 一张五味俱全的大烙饼")])]),a._v(" "),t("ul",[t("li",[a._v("编程范式")])]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("掌握范式对提升编程语感至少有两层作用:\n编程语言的语法、语义等都是从编程范式的树根衍生而出的枝叶，把握这种脉络的节奏，代码才会如音乐舞蹈般韵律有致；\n每种范式擅长的领域不同，只有博闻广识，才能扬长避短\n\n通常有一整套的理论和思想体系、具有全局性、系统性和渗透性\n更普适更抽象\n\n对语言由专门的要求，事实上，语言本来就是围绕其所倡导的核心范式来设计的\n依靠语言和工具的支持，编程范式才得以建立起一套独特而完善的抽象机制和方法体系，\n从而为倡导的世界观和方法论奠定基石\n")])])]),t("blockquote",[t("p",[a._v("核心价值")])]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("一种编程范式之所以能独树一帜，关键在于它突破了原有范式的一些限制，带来革命性的新思维和新方法，进一步解放了程序员的生产力\n")])])]),t("ul",[t("li",[a._v("总结")])]),a._v(" "),t("blockquote",[t("ul",[t("li",[a._v("语言为形 范式为神，应以神导形 以形传神")]),a._v(" "),t("li",[t("RouterLink",{attrs:{to:"/chapter/4.1_paradigms-summary.html"}},[a._v("范式总结与分析")])],1),a._v(" "),t("li",[a._v("不怕有缺点，就怕没特点")])])]),a._v(" "),t("h2",{attrs:{id:"情景范式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#情景范式"}},[a._v("#")]),a._v(" "),t("RouterLink",{attrs:{to:"/chapter/4.2_paradigms-expamle.html"}},[a._v("情景范式")])],1),a._v(" "),t("blockquote",[t("p",[a._v("—— 餐馆里的编程范式")])])])}),[],!1,null,null,null);s.default=l.exports}}]);