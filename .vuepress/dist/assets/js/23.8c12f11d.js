(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{267:function(t,n,a){"use strict";a.r(n);var e=a(28),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("ul",[a("li",[t._v("命令式/过程式（Imperative/Procedural）")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("\t\t代表语言\n\t\t\tFortran/Pascal/C\n\t\t核心概念\n\t\t\t命令/过程（Command/Procedure）\n\t\t运行机制\n\t\t\t命令执行\n\t\t关键突破\n\t\t\t突破单一主程序和非结构化程序的限制\n\t\t实现原理\n\t\t\t引入逻辑控制和子程序\n\t\t主要目的\n\t\t\t模拟机器思维，实现自顶向下的模块设计\n\t\t常见应用\n\t\t\t交互式、事件驱动型系统、数值计算等\n\t\t主要缺点\n\t\t\t过程式编程的数据和代码脱节，不方便维护\n")])])]),a("ul",[a("li",[t._v("函数式/应用式（Functional/Applicative）")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("\t\t代表语言\n\t\t\tScheme /Haskell\n\t\t核心概念\n\t\t\t函数（Function）\n\t\t运行机制\n\t\t\t表达式计算\n\t\t关键突破\n\t\t\t突破机器思维的限制\n\t\t实现原理\n\t\t\t引入高阶函数，将函数作为数据处理\n\t\t主要目的\n\t\t\t模拟数学思维，简化代码、减少副作用\n\t\t常见应用\n\t\t\t微积分计算、数学逻辑、博弈等\n\t\t主要缺点\n\t\t\t函数式和逻辑式编程的代码开发效率一般比过程式要高，但允许效率和表现力有所不及\n")])])]),a("ul",[a("li",[t._v("逻辑式（Logic）")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("\t\t代表语言\n\t\t\tProlog/Mercury\n\t\t核心概念\n\t\t\t断言（Predicate）\n\t\t运行机制\n\t\t\t逻辑推理\n\t\t关键突破\n\t\t\t突破逻辑和控制粘合的限制\n\t\t实现原理\n\t\t\t利用推理引擎在已知事实和规则基础上做逻辑推理\n\t\t主要目的\n\t\t\t专注逻辑分析，减少控制代码\n\t\t常见应用\n\t\t\t机器证明、专家系统、自然语言处理、语义网（semantic web）、决策分析、业务规则管理等\n\t\t主要缺点\n\t\t\t同函数式编程\n")])])]),a("ul",[a("li",[t._v("对象式（Object-Oriented）")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("  \t代表语言\n\t\t\tSmalltalk/Java\n\t\t核心概念\n\t\t\t对象（Object）\n\t\t运行机制\n\t\t\t对象间信息交互\n\t\t关键突破\n\t\t\t突破数据与代码分离的机制\n\t\t实现原理\n\t\t\t引入封装、继承和多态机制\n\t\t主要目的\n\t\t\t迎合人类的认知模式，提高软件的易用性和重用性\n\t\t常见应用\n\t\t\t大型复杂交互式系统等\n\t\t主要缺点\n\t\t\t在数学计算、符号处理等对象特征不明显的领域，在心理上缺乏认知基础，在运行效率上不如过程式，开发效率上不如函数式\n")])])]),a("ul",[a("li",[t._v("并发式/并行式（Concurrent/Parallel）")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("\t\t代表语言\n\t\t\tElang/Oz\n\t\t核心概念\n\t\t\t进程/线程（Process/Thread）\n\t\t运行机制\n\t\t\t进程/线程间通信和同步\n\t\t关键突破\n\t\t\t突破串行的限制\n\t\t实现原理\n\t\t\t引入并行的线程模块及模块间的通信和同步机制\n\t\t主要目的\n\t\t\t充分利用资源、提升运行效率、提高软件响应能力\n\t\t常见应用\n\t\t\t图形用户界面、IO处理、多任务系统如操作系统、网络服务器等，实时系统、嵌入式系统，计算密集型系统如科学计算、人工智能等\n\t\t主要缺点\n\t\t\t增加了代码的复杂度，加重了程序员的负担\n")])])]),a("ul",[a("li",[t._v("泛型式（Generic）")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("    代表语言\n\t\t\tAda/Eiffel/C++\n\t\t核心概念\n\t\t\t算法（Algorithm）\n\t\t运行机制\n\t\t\t算法实例化（多发生于编译期）\n\t\t关键突破\n\t\t\t突破静态类型语言的限制\n\t\t实现原理\n\t\t\t利用模板推迟类型指定\n\t\t主要目的\n\t\t\t提高算法的普适性\n\t\t常见应用\n\t\t\t普适性算法如排序、搜索，集合类容器等\n\t\t主要缺点\n\t\t\t影响代码的可读性，过度使用模块还可能造成代码膨胀（Code bloat）\n")])])]),a("ul",[a("li",[t._v("元编程（Metaprogramming）")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("\t\t代表语言\n\t\t\tLisp/Ruby/JavaScript\n\t\t核心概念\n\t\t\t元程序（Metaprogram）\n\t\t运行机制\n\t\t\t动态生成代码或自动修改执行指令\n\t\t关键突破\n\t\t\t突破语言的常规语法限制\n\t\t实现原理\n\t\t\t利用代码生成或语言内建的反射、动态等机制，将程序语言当做数据来处理\n\t\t主要目的\n\t\t\t减少手工编码，提升语言级别\n\t\t常见应用\n\t\t\t自动代码生成、定义结构化配置文件、IDE、编译器、解释器，人工智能、模型驱动架构（MDA）、领域特定语言（DSL）等\n\t\t主要缺点\n\t\t\t元编程过于强大，使用不当，易造成脱离程序员的控制，应谨慎使用\n")])])]),a("ul",[a("li",[t._v("切面式（Aspect-Oriented）")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("    代表语言\n\t\t\tAspectJ/AspectC++\n\t\t核心概念\n\t\t\t切面（Aspect）\n\t\t运行机制\n\t\t\t在接入点处执行建议\n\t\t关键突破\n\t\t\t突破横切关注点无法模块化的限制\n\t\t实现原理\n\t\t\t通过编织将附加行为嵌入主体程序\n\t\t主要目的\n\t\t\t实现横切关注点分离\n\t\t常见应用\n\t\t\t日志输出、代码跟踪、性能监控、异常处理、安全检查、事务管理等\n\t\t主要缺点\n\t\t\t减少了程序的可测试性和可控制性，同时增加了代码的调试难度，还可能造成性能上的损失\n")])])]),a("ul",[a("li",[t._v("事件驱动（Event-Driven）")])]),t._v(" "),a("div",{staticClass:"language-md extra-class"},[a("pre",{pre:!0,attrs:{class:"language-md"}},[a("code",[t._v("    代表语言\n\t\t\tC#/VB.NET\n\t\t核心概念\n\t\t\t事件\n\t\t运行机制\n\t\t\t监听收到事件通知后做出响应\n\t\t关键突破\n\t\t\t突破顺序、同步的流程限制\n\t\t实现原理\n\t\t\t引入控制反转和异步机制\n\t\t主要目的\n\t\t\t调用者和被调用者在代码和时间上双重解耦\n\t\t常见应用\n\t\t\t用户图形界面、网络应用、服务器、操作系统、IoC框架、异步输入、DOM等\n\t\t主要缺点\n\t\t\t虽然也能用于同步的流程应用，但机制更复杂，没有普通的流程式代码自然易懂\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);