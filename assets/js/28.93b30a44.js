(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{272:function(a,t,s){"use strict";s.r(t);var n=s(28),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"_7-1-抽象思维-减法和除法的学问"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-抽象思维-减法和除法的学问"}},[a._v("#")]),a._v(" 7.1 抽象思维——减法和除法的学问")]),a._v(" "),s("h3",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("什么是抽象？\n去粗取精以化繁为简；由表及里以求同存异。再精炼些，抽象就是做减法和除法。\n\n减法在于甄选，减去非本质和无关紧要的部分，着眼于问题的本质，即去粗取精。\n除法在于透过现象看本质，发现不同事物之间的相同之处，即求同存异，同类归并。\n（乘法可以看做同类复制，作为逆运算的除法自然就是同类归并了。）\n用离散数学或抽象代数的语言来说，通过抽象而产生等价关系及相应的等价类，便是集合的商运算。\n\n无论是编程风格上的差异，还是编程语言级别上的差异，\n归根结底皆源于各自提供的抽象机制的不同。\n")])])]),s("h3",{attrs:{id:"特征"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特征"}},[a._v("#")]),a._v(" 特征")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("抽象有角度之分，相同的实体经过不同角度的抽象，得到的模型会不同。\n抽象有程度之分，抽象程度越高，细节越少，普适性就越强。\n")])])]),s("h3",{attrs:{id:"抽象在开发生命周期中"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象在开发生命周期中"}},[a._v("#")]),a._v(" 抽象在开发生命周期中")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("软件设计者的任务是将复杂混沌的现实世界映射到精确严格的虚拟世界，\n要完成这种多对一的映射，抽象无疑是必由之路。\n\n在软件工程中，尽管系统开发生命周期（Systems Development Life Cycle，SDLC）\n按照不同的模型有不同的阶段划分，\n最核心的三个阶段 ——分析（analysis）、设计（design）和实现（implementation）总是必不可少的。\n")])])]),s("ul",[s("li",[a._v("分析阶段")])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("分析阶段的主要任务是在理解问题领域（problem domain）和明确业务需求（business requirement）\n的基础上制定出功能规范（functional specification）；\n\n分析阶段的抽象过程主要是以性质为导向的。\n在分析阶段的前期——领域分析中，表示领域模型的UML类图通常只标明类的性质（property）\n——包括类的属性和类与类之间的关联（association），而类的运算则可有可无。\n\n即使在分析阶段的后期——应用分析（application analysis）中，\n个体类的运算也不如整体系统的动态行为更重要，而后者是通过包括例图（use case diagram）\n在内的各种行为图（behavior diagram）来体现的。\n")])])]),s("ul",[s("li",[a._v("设计阶段")])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("设计阶段的主要任务是在分析的基础上制定出实现规范（implementation specification）；\n直到设计阶段，运算才真正成为关注的要点之一\n")])])]),s("ul",[s("li",[a._v("实现阶段")])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("实现阶段则是在设计的基础上完成软件编码。\n")])])]),s("ul",[s("li",[a._v("总结")])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("如果采用对象式导向（OO）的方法，则对应的便是 OOA、OOD、OOP\n贯穿这三个阶段的主线正是抽象，并且抽象的程度依次递减。\n\n分析阶段多采用性质导向式抽象（property—oriented abstraction），\n通过系统性的逻辑描述来指定规范。\n所谓性质导向的，即关注‘是什么’的问题而不是‘怎么样’的问题，\n因此一般不在设计上做任何的决定和限制。\n性质导向式抽象侧重于描述系统性质，因而是定性的，抽象程度较高；\n\n设计阶段多采用模型导向式抽象（model-oriented abstraction），\n通过构造数据模型来满足系统的性质，从而实现功能规范。\n模型导向式侧重于建造数学模型，因而是定量的，抽象程度较低\n对比于性质导向式抽象，抽象的角度之分和程度之分在这里得到了很好的体现\n")])])]),s("h3",{attrs:{id:"模型是抽象的结晶"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模型是抽象的结晶"}},[a._v("#")]),a._v(" 模型是抽象的结晶")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("狭义的模型通常指数学模型，因为它是最常见最精确的一类模型。\n\n在计算机科学中的数学模型大多数是离散数学模型（discrete mathematical），\n包括集合、映射、列表、笛卡尔积、树、图，等等。\n\n设计阶段的数学模型到了实现阶段就演化为了数据结构。\n\n而UML（unified modeling Language）是一种通用建模语言，\n既可以用于分析阶段的概念模型（conceptual model），\n也可以设计阶段的数学模型（mathematical model）。\n")])])]),s("h3",{attrs:{id:"具体到实际编程，常用两种抽象机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#具体到实际编程，常用两种抽象机制"}},[a._v("#")]),a._v(" 具体到实际编程，常用两种抽象机制")]),a._v(" "),s("h4",{attrs:{id:"参数抽象（abstraction-by-parameterization）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数抽象（abstraction-by-parameterization）"}},[a._v("#")]),a._v(" 参数抽象（abstraction by parameterization）")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("函数的每一个参数都是一种泛化，是对它所代表的所有可能值的一种抽象。\n")])])]),s("h4",{attrs:{id:"规范抽象（abstraction-by-specification）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规范抽象（abstraction-by-specification）"}},[a._v("#")]),a._v(" 规范抽象（abstraction by specification）")]),a._v(" "),s("h5",{attrs:{id:"文档注释或规范说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文档注释或规范说明"}},[a._v("#")]),a._v(" 文档注释或规范说明")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("  合格的文档注释中至少包括先验条件（precondition）和后验条件（postcondition），\n  分别指代代码执行前后必须满足的条件。\n  如：\n  int gcd(int a, int b) //Greatest Common Divisior\n  {\n\t  while (a = ! b){\n\t\t  (a > b) ? (a -= b) : (b -= a);\n\t  }\n\t  return a;\n  }\n  gcd函数先验条件是：a、b均为正整数，后验条件是：返回输入二数的最大公约数。\n  前者是客户方的承诺，后者是服务方的承诺。\n\n  有了文档注释或规范说明的函数成为使用者和实现者之间的一种契约\n  ——只要使用者提供满足规范的请求，实现者一定能提供满足规范的服务。\n  这种通过规范使代码的功能和实现相分离的方法便称为规范抽象，\n  他规范了服务提供方的义务，同时保障了服务享受方的权利。\n")])])]),s("ul",[s("li",[a._v("优势")])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("1.")]),a._v("\t文档性（documentation）\n  使用者不必阅读代码便可了解其用于并能正确使用他们，既省时又准确。\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("2.")]),a._v("\t局部性（locality） \n  无论是阅读还是改写某个抽象的实现代码，都不必参考其他抽象的实现代码。\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("3.")]),a._v("\t可变性（modifiability）\n  实现者在遵循规范的前提下可自由修改实现代码，不用担心影响客户代码。\n  比如，我们可以用辗转相除法重新实现gcd。\n")])])]),s("h5",{attrs:{id:"契约式设计（design-by-contract，dbc）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#契约式设计（design-by-contract，dbc）"}},[a._v("#")]),a._v(" 契约式设计（design by contract，DBC）")]),a._v(" "),s("ul",[s("li",[a._v("在OOP中还有额外的意义")])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("契约可以继承，即契约对子类仍然有效；\n\n契约能从方法（method）级别扩大到类级别\n——类不变量（class invariant）保证一个对象状态的某些限定条件永远不会被违反\n（不妨认为类不变量是加在每一个（非私有非静态）方法上的先验条件和后验条件）。\n这些都有效地保障了软件的可靠性。\n")])])]),s("ul",[s("li",[a._v("怎么实现？")])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("有些语言Eiffel、D等能直接支持契约式设计，能在语言层面上明确地保障\n包括先验条件、后验条件、类不变量、副作用（side effect）等在内的契约。\n\n至于其他如 C、C++、Java、C#等，需依赖第三方工具的支持\n比如Java可以利用语言JML（Java Modeling language）结合相应的工具\n来对契约进行静态检查、动态检查和自动生成测试用例。\n")])])]),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("契约式设计才去的是先礼后兵，摆出一副信任友好、毫不设防的姿态，\n同时也按时客户：现在不查你，不过出了事别怪我翻脸哦。\n\n这种做法强调职责分明，认为先验条件是客户方的责任，服务方无需过问。\n尚若客户违约在先，将后果自负——或拒绝服务、或抛出异常、\n或中止系统、或废进废出（Garbage In, Garbage Out）。\n")])])]),s("ul",[s("li",[a._v("发展")])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("代码契约（Code Contracts）将进入.Net 4.0的基本库中\n\nJava考虑到与以前版本的兼容性、语言的复杂度，\n暂时不支持契约式编程，作为折衷方案，J2SE1.4推出了新的关键字assert。\n\n不妨将断言（assertion）看成可执行的规范文档，\n一旦其表达式在激活状态下（enabled）无法成立，系统将抛出AssertionError的错误，请注意Error不是Exception，\n因为违约表名代码有bug，在没有debug之前，任何恢复或补救的企图都是毫无意义的。\n")])])]),s("h5",{attrs:{id:"防御性编程（defensive-programing）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#防御性编程（defensive-programing）"}},[a._v("#")]),a._v(" 防御性编程（defensive programing）")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("其目的是维护代码安全。\n如果遭遇意外的输入，一般会尽可能走妥善处理，必要时返回错误代码或抛出异常转交客户处理。\n")])])]),s("ul",[s("li",[a._v("缺陷")])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("1.")]),a._v("\t导致先验条件的重复检查。\n  比如函数已经检查了一个参数的合法性，当该函数把参数继续传入另一个参数时，\n  后者还可能要对它检查一遍。增加了代码冗余和程序效率。\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("2.")]),a._v("\t增加程序员的负担和困惑。\n  很多时候难以选择处理非法参数的方案，是返回错误码，还是抛出异常？\n  若抛出异常，又该抛哪种异常？需要写错误日志吗？\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("3.")]),a._v("\t职责不清。\n  究竟谁该保证先验条件的成立？出了问题到底该追究谁的责任？又该如何追究?\n")])])]),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("说白了，防御性编程采取的是“先小人后君子”的策略：\n先不讲情面，对所有的客户请求进行例行检查，通过后才提供真正的服务。\n")])])]),s("h4",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("相比防御性编程的彼此防备、互相提防，契约式设计建立了更好的信用机制，\n因此更多的是彼此默契、互相信任。\n\n二者虽有重合部分，但总体上是互补的，共同为软件的可口性（reliability）提供保障\n前者重在保障健壮性（robustness），适合应付无法防止或难以预测的异常；\n后者重在保障正确性（correctness），适合应付不应当发生的异常——代码中的缺陷。\n")])])]),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("软件开发过程中的阶段之间的界限是很模糊的，尤其是设计和实现这两个阶段\n有人认为软件设计不应涉及任何语言和具体细节；\n有人走另一个极端，认为代码就是设计，编译才是实现\n\n例如UML是一种建模语言，也是一种规范语言，一般不作为编程语言。\n但在模型驱动架构（Model Driven Architecture，MDA）中，\n一些用UML描述的模型可以通过CASE（Computer-aided software engineering）工具转化为实现代码。\n从本质上看，这是在用UML作元编程，或者说是把UML当作一种更高级的编程语言来使用。\n\n在契约设计中，实现中包含设计；在模型驱动架构中，设计中包含实现。\n\n实际上，与其区分设计和实现，不如把握抽象的级别。\n抽象层度越高，越接近设计，越远离实现，相应的语言级别也越高。\n另一方面，越是抽象的模型越不受细节羁绊，因而稳定性越高，普适性越强，可重用性越高。\n")])])]),s("ul",[s("li",[a._v("借助参数抽象和规范抽象，可以实现五类基本抽象")])]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("过程抽象（procedural abstraction）")])])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("过程抽象赋予程序员自定义运算（operation）的能力；（是过程范式的关键）\n\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象引入 - 运算\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象结果 - 函数\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象目的 - 将行为逻辑与实现细节分离\n")])])]),s("blockquote",[s("ul",[s("li",[a._v("数据抽象")])])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("数据抽象赋予程序员自定义类型（type）的能力；\n\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象引入 - 类型\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象结果 - 抽象数据类型\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象目的 - 将数据的逻辑属性与表示细节分离\n")])])]),s("blockquote",[s("ul",[s("li",[a._v("迭代抽象（iteration abstraction）")])])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("迭代抽象赋予程序员自定义循环（loop）的能力；\n（泛型范式中的迭代器便是迭代抽象的结果）\n\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象引入 - 循环\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象结果 - 迭代器\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象目的 - 将集合的遍历与元素的获取细节分离\n")])])]),s("blockquote",[s("ul",[s("li",[a._v("类型层级（type hierarchy）")])])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("类型层级赋予程序员自动义类族（type family）的能力；\n（设计对象范式中的继承）\n\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象引入 - 类族\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象结果 - 类型层级结构\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象目的 - 将类型家族的公共行为与具体类型分离\n")])])]),s("blockquote",[s("ul",[s("li",[a._v("多态抽象（polymorphic abstraction）")])])]),a._v(" "),s("div",{staticClass:"language-md extra-class"},[s("pre",{pre:!0,attrs:{class:"language-md"}},[s("code",[a._v("多态抽象赋予程序员自定义多态类型（polymorphic type）的能力。\n（设计对象范式与泛型范式中的多态）\n\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象引入 - 多态类型\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象结果 - 抽象类型（OOP） & 参数类型（GP）\n"),s("span",{pre:!0,attrs:{class:"token list punctuation"}},[a._v("*")]),a._v(" 抽象目的 - 将类型与算法分离\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);