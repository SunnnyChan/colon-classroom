(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{283:function(t,s,a){"use strict";a.r(s);var n=a(28),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"php-多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php-多态"}},[t._v("#")]),t._v(" PHP 多态")]),t._v(" "),a("h2",{attrs:{id:"什么是多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是多态"}},[t._v("#")]),t._v(" 什么是多态")]),t._v(" "),a("p",[t._v("多 态（Polymorphism）按字面上意思理解就是“多种形状”。\n可以理解为多种表现形式，也即“一个对外接口，多个内部实现方法”。\n在面向对象的理论 中，多态性的一般定义为：同一个操作作用于不同的类的实例，将产生不同的执行结果。\n也即不同类的对象收到相同的消息时，将得到不同的结果。")]),t._v(" "),a("p",[t._v("在实际的应用开发中，采用面向对象中的多态主要在于可以将不同的子类对象都当作一个父类来处理，\n并且可以屏蔽不同子类对象之间所存在的差异，写出通用的代码，做出通用的编程，以适应需求的不断变化。")]),t._v(" "),a("p",[t._v("多态性语言具有灵活、抽象、行为共享、代码共享的优势。")]),t._v(" "),a("h3",{attrs:{id:"重载（overload）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载（overload）"}},[t._v("#")]),t._v(" 重载（overload）")]),t._v(" "),a("p",[t._v("是发生在同一类中（与什么父类子类、继承毫无关系）"),a("br"),t._v("\n标识一个函数除了函数名外，还有函数的参数（个数和类型）。"),a("br"),t._v("\n也就是说，一个类中可以有两个或更多的函数，叫同一个名字而他们的参数不同。"),a("br"),t._v("\n相关概念是：GP、参数多态")]),t._v(" "),a("p",[t._v("覆盖(override),  是发生在子类中，（也就是说必须有继承的情况下才有覆盖发生）"),a("br"),t._v("\n我们知道继承一个类，也就有了父类了全部方法，如果你感到哪个方法不爽，功能要变，"),a("br"),t._v("\n那就把那个函数在子类中重新实现一遍。"),a("br"),t._v("\n相关概念是：OOP、继承、子类型多态")]),t._v(" "),a("h3",{attrs:{id:"多态的应用设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态的应用设计"}},[t._v("#")]),t._v(" 多态的应用设计")]),t._v(" "),a("p",[t._v("在实际的应用开发中，通常为了使项目能够在以后的时间里的轻松实现扩展与升级，"),a("br"),t._v("\n需要通过继承实现可复用模块进行轻松升级。在进行可复用模块设计时，就需要尽可能的减少使用流程控制语句。"),a("br"),t._v("\n此时就可以采用多态实现该类设计。")]),t._v(" "),a("h2",{attrs:{id:"php多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php多态"}},[t._v("#")]),t._v(" PHP多态")]),t._v(" "),a("h3",{attrs:{id:"参数多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数多态"}},[t._v("#")]),t._v(" 参数多态")]),t._v(" "),a("p",[t._v("PHP的类中不允许像C#或者Java那样定义多个名称相同但是参数顺序、类型不同的方法（不支持重载），"),a("br"),t._v("\n而是通过对参数赋默认值的方式来实现函数的参数形式可变。")]),t._v(" "),a("p",[t._v("另外由于PHP是弱类型语言，可以实现如java等强类型语言中靠改变参数类型重载方法的多态形式。")]),t._v(" "),a("p",[t._v("例子：php中的'多态'")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$sex")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'male'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n调用时：\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'Miss Gao'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'Miss Gao'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'Miss Gao'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token single-quoted-string string"}},[t._v("'women'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("例子：c#中的多态,可以定义多个方法名相同的方法，只要他们的方法签名不相同")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" void "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" void "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("int age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" void "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("int age "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("string sex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"子类型多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子类型多态"}},[t._v("#")]),t._v(" 子类型多态")]),t._v(" "),a("p",[t._v("PHP支持继承")])])}),[],!1,null,null,null);s.default=r.exports}}]);